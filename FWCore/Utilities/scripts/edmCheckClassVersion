#!  /usr/bin/env python3

import FWCore.Utilities.ClassesDefXmlUtils as ClassesDefUtils

# recursively check the base classes for a class pointer
# as building the streamer will crash if base classes are
# incomplete
def verifyBaseClasses(c) :
    missingBase = 0

    # check that all bases are loaded
    bases = c.GetListOfBases()
    if not bases :
        print ("Incomplete class ", c.GetName())
        return 1

    for b in bases :
        bc = b.GetClassPointer()
        if bc :
            missingBase += verifyBaseClasses(bc)
        else :
            print ("Incomplete base class for ", c.GetName(), ": ", b.GetName())
            missingBase += 1

    return missingBase

def checkDictionaries(name):
    c = ROOT.TClass.GetClass(name)
    if not c:
        raise RuntimeError("failed to load dictionary for class '"+name+"'")

    missingDict = verifyBaseClasses(c)
    if missingDict == 0 :
        si = c.GetStreamerInfo()
        if si :
            ts = si.GetElements()
            for telem in ts :
                clm = telem.GetClassPointer()
                if clm and not clm.IsLoaded() :
                    print ("Missing dictionary for ", telem.GetName(), " type ", clm.GetName())
                    missingDict += 1
        else :
            print ("No streamer info for ", c.GetName())
            missingDict += 1

    return missingDict

#Setup the options
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
oparser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
oparser.add_argument("-d","--check_dictionaries", dest="checkdict",action="store_true",default=False,
                     help="check that all required dictionaries are loaded")
oparser.add_argument("-l","--lib", dest="library", type=str,
                     help="specify the library to load. If not set classes are found using the PluginManager")
oparser.add_argument("-x","--xml_file", dest="xmlfile",default="./classes_def.xml", type=str,
                     help="the classes_def.xml file to read")
oparser.add_argument("-g","--generate_new",dest="generate", action="store_true",default=False,
                     help="instead of issuing errors, generate a new classes_def.xml file.")

options=oparser.parse_args()

ClassesDefUtils.initROOT(options.library)
if options.library is None and options.checkdict:
    print ("Dictionary checks require a specific library")

missingDict = 0

ClassesDefUtils.initCheckClass()

p = ClassesDefUtils.XmlParser(options.xmlfile)
foundErrors = dict()
for name,info in p.classes.items():
    errorCode,rootClassVersion,classChecksum = ClassesDefUtils.checkClass(name,info[ClassesDefUtils.XmlParser.classVersionIndex],info[ClassesDefUtils.XmlParser.versionsToChecksumIndex])
    if errorCode != ClassesDefUtils.noError:
        foundErrors[name]=(errorCode,classChecksum,rootClassVersion)
    if options.checkdict :
        missingDict += checkDictionaries(name)

foundRootDoesNotMatchError = False
originalToNormalizedNames = dict()
for name,retValues in foundErrors.items():
    origName = p.classes[name][ClassesDefUtils.XmlParser.originalNameIndex]
    originalToNormalizedNames[origName]=name
    code = retValues[0]
    classVersion = p.classes[name][ClassesDefUtils.XmlParser.classVersionIndex]
    classChecksum = retValues[1]
    rootClassVersion = retValues[2]
    if code == ClassesDefUtils.errorRootDoesNotMatchClassDef:
        foundRootDoesNotMatchError=True
        print ("error: for class '"+name+"' ROOT says the ClassVersion is "+str(rootClassVersion)+" but classes_def.xml says it is "+str(classVersion)+". Are you sure everything compiled correctly?")
    elif code == ClassesDefUtils.errorMustUpdateClassVersion and not options.generate:
        print ("error: class '"+name+"' has a different checksum for ClassVersion "+str(classVersion)+". Increment ClassVersion to "+str(classVersion+1)+" and assign it to checksum "+str(classChecksum))
    elif not options.generate:
        print ("error:class '"+name+"' needs to include the following as part of its 'class' declaration")
        print ('   <version ClassVersion="'+str(classVersion)+'" checksum="'+str(classChecksum)+'"/>')


if options.generate and not foundRootDoesNotMatchError and not missingDict:
    f = open(options.xmlfile)
    outFile = open('classes_def.xml.generated','w')
    out = ''
    for l in f.readlines():
        newLine = l
        if -1 != l.find('<class') and -1 != l.find('ClassVersion'):
            splitArgs = l.split('"')
            name = splitArgs[1]
            normName = originalToNormalizedNames.get(name,None)
            if normName is not None:
                indent = l.find('<')
                #this is a class with a problem
                classVersion = p.classes[normName][XmlParser.classVersionIndex]
                code,checksum,rootClassVersion = foundErrors[normName]
                hasNoSubElements = (-1 != l.find('/>'))
                if code == ClassesDefUtils.errorMustUpdateClassVersion:
                    classVersion += 1
                    parts = splitArgs[:]
                    indexToClassVersion = 0
                    for pt in parts:
                        indexToClassVersion +=1
                        if -1 != pt.find('ClassVersion'):
                            break
                    parts[indexToClassVersion]=str(classVersion)
                    newLine = '"'.join(parts)

                if hasNoSubElements:
                    newLine = newLine.replace('/','')
                out +=newLine
                newLine =' '*indent+' <version ClassVersion="'+str(classVersion)+'" checksum="'+str(checksum)+'"/>\n'
                if hasNoSubElements:
                    out += newLine
                    newLine=' '*indent+'</class>\n'
        out +=newLine

    outFile.writelines(out)

if (len(foundErrors)>0 and not options.generate) or (options.generate and foundRootDoesNotMatchError) or missingDict:
   import sys
   sys.exit(1)

